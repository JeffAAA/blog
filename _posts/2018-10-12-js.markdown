---
layout:     post
title:      "实现对象迭代器"
date:       2018-10-12
author:     "Jeff"
header-img: "img/post-bg-2015.jpg"
tags:
    - javascript
---

### 实现一个对象迭代器

使用`for...of`在对象上时，js是会报错的，因为对象没有内置迭代行为。

而`Map` / `Array`则是内置的可迭代对象，并且有默认的迭代行为。所以可以用`for...of`来迭代。

为了变成可迭代对象， 一个对象必须实现 ** @@iterator **方法, 意思是这个对象（或者它原型链 [prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain) 上的某个对象）必须有一个名字是 [`Symbol`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)`.iterator` 的属性。
这个属性在对象需要被迭代的时候（比如用于一个`for..of循环中`），它的**@@iterator**方法被调用，然后返回一个用于在迭代中获得值的迭代器。

具体而言，这个函数不接受参数，并且会返回一个对象。这个对象中需要有一个next方法。

next方法也不接受参数，并且返回一个对象，对象里有俩个值，**done**和**value**。

代码如下

```javascript
let obj = {
        a: 1,
        b: 2,
        c: 3
    }

    Object.defineProperty(obj, Symbol.iterator, {
        value: () => ({
            i: 0,
            next() {
                if (this.i < 3) {
                    return { value: this.i++, done: false };
                }
                return { value: undefined, done: true };
            }
        })
    })
    for (let i of obj) {
        console.log(i);
    }
    //0
	//1
	//2

    let iterator = obj[Symbol.iterator]();
    console.log(iterator.next())
    console.log(iterator.next())
    console.log(iterator.next())
    console.log(iterator.next())
	//{value: 0, done: false}
	//{value: 1, done: false}
	//{value: 2, done: false}
	//{value: undefined, done: true}
```