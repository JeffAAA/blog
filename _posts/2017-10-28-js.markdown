---
layout:     post
title:      " 实(chao)现(xi)一个partial函数 "
date:       2017-10-28
author:     "Jeff"
header-img: "img/post-bg-2015.jpg"
tags:
    - JavaScript
    - underscore
---

## 实(chao)现(xi)一个partial函数

偏函数在之前实现**bind**有得到过定义:

>### 偏函数（Partial Functions）
>
>`bind()`的另一个最简单的用法是使一个函数拥有预设的初始参数。这些参数（如果有的话）作为`bind()`的第二个参数跟在`this`（或其他对象）后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面。

简单的说就是可以可以将一个函数的部分参数固定，把一个n元函数转换为一个n - x 元函数(x指固定的参数)。

其实有点类似于bind函数，但偏函数不会绑定this，还可以传入占位符。

我们先实现一个不含占位符的偏函数:

```javascript
function partial(fn) {
  let args = [].slice.call(arguments, 1);
  return function () {
    args = args.concat([].slice.call(arguments));
    return fn.apply(this, args)
  }
}

let add = function (a, b) {
  return a + b 
}
let partialAdd = partial(add, 2);
console.log(partialAdd(1))       // 3
```

可以看到，上面的偏函数的this是本身的this，所以不会绑定其他的this。

接下来我们可以支持一下传入占位符的功能，

```javascript
function partial(fn) {
  let args = [].slice.call(arguments, 1);
  return function () {
    let position = 0;
    for (let i = 0; i < args.length; i++) {
      args[i] = args[i] === '_' ? arguments[position++] : args[i];
    }
    while (position < arguments.length) {
      args.push(arguments[position++]);
    }
    return fn.apply(this, args)
  }
}

let add = function (a, b, c) {
  return a + b + c
}
let partialAdd = partial(add, '_', 2);
console.log(partialAdd(1, 3))       // 6
// 这个时候在add函数参数为 1，2，3  证明我们的偏函数传入的占位符生效了
```

偏函数的实现到此就ok了。