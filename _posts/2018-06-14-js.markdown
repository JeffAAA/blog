---
layout:     post
title:      "关于前端异常监控系统的一些思考"
subtitle:   ""
date:       2018-06-14
author:     "Jeff"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - JavaScript
    - 异常监控
---

### *javascript异常上报的必要性*

我们的web页面在开发完成上线后，实际上这个时候的web页面还存在着很多bug。

其中有些是js脚本里抛出的异常。我们无法在上线前解决他们，因为这些异常出现的场景我们不一定能触发。

这个时候，**前端异常上报系统**就显得十分有意义了。它能帮助开发者定位脚本里的异常位置，解决异常问题，减少web页面的crash情况，优化用户体验。



### *我们需要捕获哪些异常？*

- javascript脚本里的异常
- 静态资源异常，包括js、img、css等

静态资源的异常很好监控，一般直接给相应的DOM节点监听*error*事件就行。重点是javascript脚本里的异常捕获。



### *如何捕获脚本异常？*

#### window.onerror

浏览器提供了一个全局的异常捕获API：

> ```javascript
> window.onerror = function(message, source, lineno, colno, error) { ... }
> ```
>
> 函数参数：
>
> - `message`：错误信息（字符串）。可用于HTML `onerror=""`处理程序中的`event`。
> - `source`：发生错误的脚本URL（字符串）
> - `lineno`：发生错误的行号（数字）
> - `colno`：发生错误的列号（数字）
> - `error`：[Error对象](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)（对象）
>
> 若该函数返回`true`，则阻止执行默认事件处理函数。

通过这个api，我们基本上能实现同域脚本的异常捕获。注意，为了捕获全局异常，*window.onerror*需要放在其他脚本的前面。

但是，因为浏览器的[限制](https://bugzilla.mozilla.org/show_bug.cgi?id=363897)，当加载不同域的脚本中发生语法错误时，*window.onerror*捕获到的只是一句简单的**"Script error."**。

要想拿到不同域脚本里的详细异常信息，我们需要给该脚本的**script**标签添加crossOrigin属性，代表着启用**CORS**（跨域资源共享）。

同时，该脚本资源也必须设置CORS。一般我们会把js放在cdn上，所以需要去cdn上设置CORS的内容，例如Allow-Origin，Allow-Methods。

完成上面的操作后，*window.onerror*就能捕获到不同域脚本异常的具体信息了。

#### **try...catch**

>  **try...catch**语句将能引发错误的代码放在try块中，并且对应一个响应，然后有异常被抛出。

我们可以手动给代码块添加*try...catch*语句，比如

```javascript
try {
   throw Error("myException"); // generates an exception
}
catch (e) {
   // statements to handle any exceptions
   report(e); // 上报错误
}
```

这是一种侵入式的捕获异常方式。

需要注意的是*try...catch*语句无法捕获异步的函数，就是说，我们给请求网络的函数包裹了*try…catch*后，还得给网络的回调函数添加*try…catch*语句。太麻烦啦。。。我选择死亡。。

**这里提供一个思路**，**通过webpack，uglifyJs提供的操作语法树（AST）的功能，对源代码进行预处理，自动给函数加上try/catch**。

另外，如果需要把异常上报系统提供给其他人使用，AST的方案就没办法做了。并且要考虑到跨域的问题的话，这个时候，还可以从封装原生函数角度上去做上报。
我们选择性的封装原生的异步函数，例如`setTimeout`，`setInterval`，`Promise`等。

### *捕获异常过程中一些麻烦的点*

- 压缩代码定位异常

  线上代码我们一般都会进行压缩处理，压缩代码无法定位到错误的具体位置。解决方法是添加sourceMap文件。拿到异常信息后，可以通过sourceMap文件定位源代码。

- *Promise*的异常捕获

  我们使用*Promise*一般会用到它的**catch**方法，但是我个人很容易漏写。这里可以监听一个全局事件**unhandledrejection**，可以捕获全局的Promise异常。

  ​

### *异常上报的内容*

能够捕获异常之后，要问问自己，上报上的异常数据有哪些方面，它们是如何支持问题定位的？

我个人认为，需要考虑上传用户、网络、设备、数据、函数、流程等内容。

- 用户，指用户的uid等标示身份的数据
- 网络，指用户的网络情况
- 设备，指终端的详细信息
- 数据，指当前异常的全局数据（例如redux的store，可以完整的把这个store上传）
- 函数，指发生异常的函数名
- 流程，指异常的堆栈情况

主要目的是为了**完整的复现一个异常现场**。

### *异常上报接口撑不住大流量的访问怎么办？*

例如电商网站秒杀时，会有大流量进入网站。这个时候，我们异常上报接口无法处理这么多请求。

参考一些异常上报系统的做法

- 抽样上报，客户端遇到异常时，随机上报

- 减少重复上报次数，限制同一异常上报的上限次数，避免一个客户端上报太多次同样的异常

- 合并上报，类似`underscore`的debounce函数，在一定时间延时内，或者一个队列长度内，我们把异常存在队列中。

  当队列满了，或者延时到期时，我们一次性把队列内的异常上报。这里减少了请求数，并且减少每次请求需要上报的基础数据的大小。（以前1个异常携带基础数据，多个异常就有多个基础数据）

### *如果捕获异常的代码有问题，怎么办*

其实很简单，使用try/catch包裹，捕获它的异常。

---

以上是一些关于前端异常捕获的思考点。有不对的地方请留言指教一波，欢迎讨论。