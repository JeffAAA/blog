---
layout:     post
title:      "我的博客升级至HTTP/2啦～"
subtitle:   ""
date:       2018-6-28
author:     "Jeff"
header-img: "img/post-bg-2015.jpg"
tags:
    - http/2
---

打开chrome开发者工具，选中**network**这一栏，可以发现**protocol**已经变成*h2*了。这代表着协议是HTTP/2。

<img src="/img/blog_upgrade.jpeg">



##### 升级到HTTP/2有什么好处呢？我停留在HTTP/1.1不好吗

> HTTP/1.x 客户端需要使用多个连接才能实现并发和缩短延迟；
>
> HTTP/1.x 不会压缩请求和响应标头，从而导致不必要的网络流量；
>
> HTTP/1.x 不支持有效的资源优先级，致使底层 TCP 连接的利用率低下；等等。

HTTP/2解决了以上的问题。分为三点**多路复用**，**头部压缩**，**服务器推送**。

#### 多路复用

在**HTTP/1.0**中，每请求一个资源，都需要建立一次TCP连接，然后发起HTTP请求。请求完毕后，这个TCP连接就关闭了。我们都知道每完成一次TCP连接，都需要三次握手，四次挥手。

现在web页面里的请求数一般都不少，所以在HTTP/1.0的时候，100个请求意味着100次的TCP链接的建立和关闭。这个消耗时间是很长的，因为同一个域名下，浏览器最大只支持同时6个TCP连接。

*所以我们会把不同资源，放到不同域名下，提升请求资源的并发数。但这样会造成解析DNS的压力。*

在HTTP/1.1中，所有的连接默认都是持续连接。

>**HTTP持久连接**（**HTTP persistent connection**，也称作**HTTP keep-alive**或**HTTP connection reuse**）是使用同一个[TCP](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)连接来发送和接收多个HTTP请求/应答，而不是为每一个新的请求/应答打开新的连接的方法。

```
Connection: Keep-Alive
```

这意味着，TCP连接在获取资源后不会立即关闭，而是持续到浏览器/服务器认为这次会话结束。

并且这个连接可以发送和接受多个HTTP请求，意味着整体请求速度的提升，因为减少了不必要的TCP连接（三次握手，四次挥手）。

##### 今天的web应用里动辄上百个请求资源，keep-alive也有些hold不住了，请求并发数还是为6，资源需要排队请求。这个叫做队首阻塞问题。

HTTP/2中的**多路复用**，就是解决了这个问题。它允许在一个TCP连接上，进行进行多个资源的并发交换。

通过在TCP（传输层）和HTTP/2（应用层）这俩层中，添加一个二进制分帧层。把http报文切割成更小的信息和帧，使用二进制的格式进行编码。

- 每条消息都是一条逻辑 HTTP 消息（例如请求或响应），包含一个或多个帧。
- 帧是最小的通信单位，承载着特定类型的数据，例如 HTTP 标头、消息负载，等等。 来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。

例如下图，http/1.1的头部被封装成HEADERS帧，请求体被封装成DATA帧。这些帧可以乱序发送，因为它们帧头带有标识符，用来按序重组。

<img src="/img/binary_frame_layer.jpeg"/>

这样的话， HTTP 消息分解为独立的帧，交错发送，然后在另一端重新组装。

- 并行交错地发送多个请求，请求之间互不影响。
- 并行交错地发送多个响应，响应之间互不干扰。
- 使用一个连接并行发送多个请求和响应。
- 不必再为绕过 HTTP/1.x 限制而做很多工作（请参阅[针对 HTTP/1.x 进行优化](https://hpbn.co/optimizing-application-delivery/#optimizing-for-http1x)，例如级联文件、image sprites 和域名分片。
- 消除不必要的延迟和提高现有网络容量的利用率，从而减少页面加载时间。
- *等等…*

这个多路复用对页面请求速度的提升还是很大的，可以看下这个[demo](https://http2.akamai.com/demo)。

#### 服务器推送

这里指的资源的推送。

简单的说就是服务器在和浏览器建立连接后，服务器主动把一些未来要用到的资源推送到浏览器，浏览器缓存下来。

这里暂时不去深入研究。作用是优化页面的展示速度。

#### 头部压缩

字面意思，内部实现暂时不去看。作用是减少了http传输的开销。

##### 关于http/2详细的信息请看google的[简介](https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn)。

### 升级过程

##### 那么升级到HTTP/2麻烦吗？是不是要大改？

因为HTTP/2只支持HTTPS，所以我们升级的前提是我们是HTPPS协议。假如你的网站是有添加 **SSL** （安全套接层，提供加密 / 认证功能）的话，完全不麻烦！只用改一下服务器配置。

因为HTTP/2 仍是对之前 HTTP 标准的扩展，而非替代。 

HTTP 的应用语义不变，提供的功能不变，HTTP 方法、状态码、URI 和Header等这些核心概念也不变。

对我来说，我之前给本博客添加**SSL**这一层，使得我们可以使用HTTPS协议。所以我想升级至HTTP/2的话，只用去修改博客的服务器配置就好。我使用的是**nginx**，在1.9.5版本后都已经支持升级HTTP/2。

[教程](https://www.nginx.com/blog/nginx-1-9-5/)如下

>Enabling HTTP/2
>
>To enable HTTP/2 support, simply add the `http2` parameter to all `listen` directives. Also include the `ssl` parameter, required because browsers do not support HTTP/2 without encryption.

所以我只用给`listen`指令里添加`http2`参数。如下

<img src="/img/nginx_config_h2.jpeg" />

接下来执行`nginx -s reload`，重启nginx服务即可。

即然升级过程如此简单，又有这么多好处，建议大家都考虑升级一下～