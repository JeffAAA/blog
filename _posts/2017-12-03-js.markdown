---
layout:     post
title:      "HTTP缓存的介绍"
subtitle:   "干货"
date:       2017-12-03
author:     "Jeff"
header-img: "img/post-bg-2015.jpg"
tags:
    - JavaScript
    - Http
---


该文主要从[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers)整理，有不对的地方还请斧正。

缓存对于WEB开发具有重要作用，在浏览器缓存中我可们利用发送指定的HTTP头来告诉浏览器是否缓存，缓存多长时间。

- ## Expires

  >The `Expires` header contains the date/time after which the response is considered stale.
  >
  >Invalid dates, like the value 0, represent a date in the past and mean that the resource is already expired.

  [Expires(过期时间)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires)用于告诉浏览器该资源在多长时间内是新鲜的，即未过期。过了这个时间，浏览器就会向服务器发送请求。缺点是，一但客户端日期不准确，则可能导致失效。

  #### **语法**

  ```javascript
  Expires: <http-date>
  ```

  #### **例子**

  ```javascript
  Expires: Wed, 21 Oct 2015 07:28:00 GMT
  ```

  需要注意的是这个http-date是指GMT(格林威治时间)，错误的日期(例如0)，或者预设的过去的时间代表这个资源已经过期了。

  同时，如果在response header里有[`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)这个HTTP头，它携带里“max-age”或者“s-max-age”的话，`Expires`将会被忽略。

  #### **场景**

  例如设置静态图片文件的缓存，如果这个图片很少会修改，那我们可以给它设置一个很长的Expires，这样浏览器会在过期时间从缓存里取图片。

  ​

- ## Cache-Control

   `Cache-Control`通用消息头被用于在http 请求和响应中通过指定指令来实现缓存机制。缓存指令是单向的, 这意味着在请求设置的指令，在响应中不一定包含相同的指令。

     `Cache-Control` 的指令就是指它设置的值，下面的例子里**public, max-age=31536000**就是指令。

   ```
   Cache-Control:public, max-age=31536000
   ```

   ### 指令

   ***

   ### 可缓存性

   ####  **```public```**

     表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存。

   ####  **```private```**

     表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。

   ####  **```no-cache```** 

     强制所有缓存了该响应的缓存用户，在使用已存储的缓存数据前，发送带验证器的请求到原始服务器。

   ####  **```only-if-cached```**

     表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。表示只接受是被缓存的内容。

   ### 到期

   ####  **`max-age=<seconds>`**

     设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。即从请求的时间开始的时间内是新鲜的。优先于Expires头。

   ####  **`s-maxage=<seconds>`**

     优先于max-age 或者 Expires 头，但是仅适用于共享缓存(比如各个代理)，并且私有缓存中它被忽略。

   ####  **`max-stale[=seconds]`**

     最大不新鲜时间，表示客户端在一个时间内(单位秒)愿意接受一个已经过期的资源。

   ####  **`min-fresh=<seconds>`**

     最小新鲜时间，表示客户端希望在指定的时间内获取最新的响应。

   ### 重新验证和重新加载

   ####  **`must-revalidate`**

     必须重新验证，即缓存必须在使用之前验证资源的状态，并且不可以使用过期资源。

   ####  **`proxy-revalidate`**

     与must-revalidate作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。

   ### 其他

   ####  **`no-store`**

     缓存不应该存储客户端请求或者服务端响应的任何内容。

   ####  **`no-transform`**

     不得对资源进行转换或转变。Content-Encoding, Content-Range, Content-Type等HTTP头不能由代理修改。例如，非透明代理可以对图像格式进行转换，以便节省缓存空间或者减少缓慢链路上的流量。 no-transform指令不允许这样做。

   ***

   ### 例子

   #### **禁止缓存**

     ```Cache-control: no-cache, no-store, must-revalidate```

   #### **缓存静态资源**

   ​  ```Cache-Control:public, max-age=31536000```







- ## Last-Modified / **If-Modified-Since** / **If-Unmodified-Since**

  `Last-Modified`响应头的值是服务端给出的一个资源的最后修改时间。like this

  ```
  Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT
  ```

  `if-Modefied-Since`的格式与`Last-Modefied`一样，

  ```
  If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT
  ```

  但是它是请求头，在发送HTTP请求时，它会把浏览器端的缓存的**`Last-Modified`**时间发往服务器，服务器会把这个时间与实践上的资源最后修改时间做比较。

  如果时间一致，说明资源未修改，返回的将是`304`HTTP状态码，没有资源内容，浏览器直接使用本地缓存。

  如果时间不一致，说明资源被修改了，服务器将会返回请求的资源，附带`200`HTTP状态码。

  注意，当和`If-None-Match`混用时，`If-Modified-Since`会被忽略，除非服务器不支持`If-None-Match`。`If-Modified-Since` 只能用于`GET`,`HEAD`方法。

  ***

  ### **If-Unmodified-Since**

  `If-Unmodified-Since`与`If-Modified-Since`相对应，还可以用于不安全(即会改变服务器的状态)的方法，比如`POST`。

  同`If-Modified-Since`一样，区别在于比较**`Last-Modified`**时间时，若资源没被修改，则返回请求的资源，附带`200`HTTP状态码。若资源被修改了，返回`402`HTTP状态码，代表先决条件失败`Precondition Failed`。

  总的来说，`If-Unmodified-Since`与`If-Modified-Since`一个是没修改再返回资源，一个是修改了再返回资源。

  ###作用场景

  断点续传(一般会指定`If-Range`头). 要想断点续传, 那么文件就一定不能被修改, 否则就不是同一个文件了, 断续还有啥意义?

  ​

- ## **ETag / If-None-Match** / If-Match

  `ETag`响应头是为一个特定版本的资源生成的识别码。它有助于提高缓存的效率，并且节省带宽。如果服务器端的资源没发生改变，那它没有必要返回完整的资源，另一方面，假如资源发生改变，`ETag`可以防止对资源同时进行的更新造成的资源覆盖(mid-air collisions)。

  如果给定URL上的资源改变了，一定会生成一个新的`ETag`值。因此`ETag`类似指纹，可以被服务器用于追踪的目的。通过`ETag`可以快速的确定两个资源是否相同。

  ### 语法

  ```
  ETag: W/"<etag_value>" 
  ETag: "<etag_value>"
  ```

  `W`/`Optional`

  指代使用弱验证。弱验证易于生成，强验证很难效率高的生成。相同资源的两个弱验证`ETag`值，在语义上是相等的，但不是每个字节相同。

  `<etag_value>`

  代表请求资源的唯一实例标签。类似于hash。

  下面是两个`ETag`例子

  ```
  ETag: "33a64df551425fcc55e4d42a148795d9f25f89d4"
  ETag: W/"0815"
  ```

  那`ETag`的作用是什么呢？需要结合 `If-None-Match`/ `If-Match`来说。

  ` If-None-Match` /` If-Match`请求头的值是一个特定版本的资源生成的识别码，与`ETag`对应。

  ### `ETag`的作用场景

  + Avoiding mid-air collisions （防止空中碰撞，即防止资源的覆盖）

    当我们请求资源时，服务器会把资源的`ETag`放在response里，当我们对资源做改变发送一个post时，会把`ETag ` 的值通过`If-Match`请求头附带。这时候，服务器会把资源本身的ETag值和`If-Match`的值做对比。

    假如匹配，代表服务器上的资源没变化，可以正常通过`POST`修改资源。

    假如不匹配，代表服务器的资源已经被修改，那我们发送`POST`前获取的资源就和服务器上的不同，代表已经被别人修改了。这样会造成资源的覆盖。服务器会返回`402`（Precondition Failed）HTTP状态码。

  + 缓存未改变的资源

    这是一个比较通用的场景,如果一个用户第二次访问一个URL，给定了一个`ETag`,并且这个ETag是不新鲜的，客户端会通过`If-None-Match`请求头把这个`ETag`值带上。

    服务器会把`If-None-Match`的值与当前资源的`ETag`比对，假如匹配，代表资源未修改，服务器会返回`304`HTTP状态码，不附带任何body。代表了缓存的资源是新鲜的。


***

## 总结

`Expires`/`Cache-Control`是控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只是`Cache-Control`比`Expires`可以控制的多一些， 而且`Cache-Control`会重写`Expires`的规则。

`Last-Modified`/`If-Modified-Since`/`If-Unmodified-Since`和`ETag`/`If-None-Match`/`If-Match`是浏览器发送请求到服务器后判断文件是否 已经修改过，如果没有修改过就只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器。